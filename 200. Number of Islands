//https://leetcode.com/problems/number-of-islands/#/description
// DFS

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty() || grid[0].empty()) return 0;  // important for input like []
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> isVisited(n, vector<bool>(m, false));
        int count = 0;
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if(grid[i][j]=='1'&&isVisited[i][j]==false){
                    dfs(grid, isVisited, i, j);
                    count++;
                 }           
            }
        }
        return count;
    }
    
    void dfs(vector<vector<char>>& grid, vector<vector<bool>>& isVisited, int i, int j){
        if (i<0 || i>=grid.size() || j<0 || j>=grid[0].size()) return;
        if (isVisited[i][j]||grid[i][j]=='0') return;
        isVisited[i][j] = true;
        dfs(grid, isVisited, i, j-1);
        dfs(grid, isVisited, i, j+1);
        dfs(grid, isVisited, i-1, j);
        dfs(grid, isVisited, i+1, j);
    } 
};
