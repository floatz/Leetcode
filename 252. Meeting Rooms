/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    bool canAttendMeetings(vector<Interval>& intervals) {
        if (intervals.size()==0) return true;
        sort(intervals.begin(), intervals.end(), [](const Interval&a, const Interval&b){return a.start<b.start;});
        stack<int> s;
        s.push(intervals[0].end);
        for (int i = 1; i<intervals.size(); i++){
            if(s.top()<=intervals[i].start) s.push(intervals[i].end);            
        }
        return s.size()==intervals.size();
    }
};
