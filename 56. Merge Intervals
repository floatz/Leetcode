/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
    struct compInterval {
        bool operator()(const Interval &a, const Interval &b) const {
            return a.start<b.start;
        }
    };

class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size()==0) return intervals;
        vector<Interval> res;
        sort(intervals.begin(),intervals.end(),compInterval());
        Interval tmp = intervals[0];
        for (int i = 1;i<intervals.size(); i++){
            if(intervals[i].start<=tmp.end ) {
                tmp.start = min(tmp.start, intervals[i].start);
                tmp.end = max(tmp.end,intervals[i].end);                
            } 
            else {
                res.push_back(tmp);
                tmp = intervals[i];
            }
        }
        res.push_back(tmp);
        return res;
    }
};
